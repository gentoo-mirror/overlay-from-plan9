--- a/src/plugins/Matrix.cpp	2024-11-27 07:52:02.276075511 +0000
+++ b/src/plugins/Matrix.cpp	2024-11-27 08:34:57.126581625 +0000
@@ -2479,11 +2479,58 @@
             return "";
 
         std::string size = std::to_string(int(32 * get_config().scale));
-        return homeserver + "/_matrix/media/r0/thumbnail/" + mxc_id + "?width=" + size + "&height=" + size + "&method=crop";
+
+        Path session_path = get_storage_dir().join(SERVICE_NAME).join("session.json");
+        std::string session_json_content;
+        if(file_get_content(session_path, session_json_content) != 0) { 
+            fprintf(stderr, "Info: failed to read matrix session from %s. Either its missing or we failed to read the file\n", session_path.data.c_str());
+            return NULL;
+        }
+
+        rapidjson::Document json_root;
+        rapidjson::ParseResult parse_result = json_root.Parse(session_json_content.c_str(), session_json_content.size());
+        if(parse_result.IsError()) {
+            fprintf(stderr, "Matrix cached session parse error: %d\n", parse_result.Code());
+            return NULL;
+        }
+
+        if(!json_root.IsObject())
+            return NULL;
+
+        const rapidjson::Value &access_token_json = GetMember(json_root, "access_token");
+        if(!access_token_json.IsString()) {
+            fprintf(stderr, "Failed to parse matrix cached session response\n");
+            return NULL;
+        }
+
+        return homeserver + "/_matrix/client/v1/media/thumbnail/" + mxc_id + "?width=" + size + "&height=" + size + "&method=crop&access_token=" + access_token_json.GetString();
     }
 
     std::string Matrix::get_media_url(const std::string &mxc_id) {
-        return homeserver + "/_matrix/media/r0/download/" + thumbnail_url_extract_media_id(mxc_id);
+        Path session_path = get_storage_dir().join(SERVICE_NAME).join("session.json");
+        std::string session_json_content;
+        if(file_get_content(session_path, session_json_content) != 0) { 
+            fprintf(stderr, "Info: failed to read matrix session from %s. Either its missing or we failed to read the file\n", session_path.data.c_str());
+            return NULL;
+        }   
+
+        rapidjson::Document json_root;
+        rapidjson::ParseResult parse_result = json_root.Parse(session_json_content.c_str(), session_json_content.size());
+        if(parse_result.IsError()) {
+            fprintf(stderr, "Matrix cached session parse error: %d\n", parse_result.Code());
+            return NULL;
+        }
+            
+        if(!json_root.IsObject())
+            return NULL;
+
+        const rapidjson::Value &access_token_json = GetMember(json_root, "access_token");
+        if(!access_token_json.IsString()) {
+            fprintf(stderr, "Failed to parse matrix cached session response\n");
+            return NULL;
+        }
+
+        return homeserver + "/_matrix/client/v1/media/download/" + thumbnail_url_extract_media_id(mxc_id) + "?access_token=" + access_token_json.GetString();
     }
 
     RoomExtraData& Matrix::get_room_extra_data(RoomData *room) {
@@ -2609,7 +2656,32 @@
                     return "";
 
                 thumbnail_str.erase(thumbnail_str.begin(), thumbnail_str.begin() + 6);
-                return homeserver + "/_matrix/media/r0/download/" + std::move(thumbnail_str);
+
+                Path session_path = get_storage_dir().join(SERVICE_NAME).join("session.json");
+                std::string session_json_content;
+                if(file_get_content(session_path, session_json_content) != 0) { 
+                    fprintf(stderr, "Info: failed to read matrix session from %s. Either its missing or we failed to read the file\n", session_path.data.c_str());
+                    return NULL;
+                }   
+
+                rapidjson::Document json_root;
+                rapidjson::ParseResult parse_result = json_root.Parse(session_json_content.c_str(), session_json_content.size());
+                if(parse_result.IsError()) {
+                    fprintf(stderr, "Matrix cached session parse error: %d\n", parse_result.Code());
+                    return NULL;
+                }
+            
+                if(!json_root.IsObject())
+                    return NULL;
+
+                const rapidjson::Value &access_token_json = GetMember(json_root, "access_token");
+                if(!access_token_json.IsString()) {
+                    fprintf(stderr, "Failed to parse matrix cached session response\n");
+                    return NULL;
+                }
+
+
+                return homeserver + "/_matrix/client/v1/media/download/" + std::move(thumbnail_str) + "?access_token=" + access_token_json.GetString();
             }
         }
 
@@ -3417,12 +3489,36 @@
 
         // TODO: Also show joins, leave, invites, bans, kicks, mutes, etc
 
+        Path session_path = get_storage_dir().join(SERVICE_NAME).join("session.json");
+        std::string session_json_content;
+        if(file_get_content(session_path, session_json_content) != 0) { 
+            fprintf(stderr, "Info: failed to read matrix session from %s. Either its missing or we failed to read the file\n", session_path.data.c_str());
+            return NULL;
+        }   
+
+        rapidjson::Document json_root;
+        rapidjson::ParseResult parse_result = json_root.Parse(session_json_content.c_str(), session_json_content.size());
+        if(parse_result.IsError()) {
+            fprintf(stderr, "Matrix cached session parse error: %d\n", parse_result.Code());
+            return NULL;
+        }
+            
+        if(!json_root.IsObject())
+            return NULL;
+
+        const rapidjson::Value &access_token_json = GetMember(json_root, "access_token");
+        if(!access_token_json.IsString()) {
+            fprintf(stderr, "Failed to parse matrix cached session response\n");
+            return NULL;
+        }
+
+
         if((content_type.IsString() && strcmp(content_type.GetString(), "m.image") == 0) || strcmp(type_json.GetString(), "m.sticker") == 0) {
             const rapidjson::Value &url_json = GetMember(*content_json, "url");
             if(!url_json.IsString() || strncmp(url_json.GetString(), "mxc://", 6) != 0)
                 return nullptr;
 
-            message->url = homeserver + "/_matrix/media/r0/download/" + (url_json.GetString() + 6);
+            message->url = homeserver + "/_matrix/client/v1/media/download/" + (url_json.GetString() + 6) + "?access_token=" + access_token_json.GetString();
             message->thumbnail_url = message_content_extract_thumbnail_url(*content_json, homeserver);
             message_content_extract_thumbnail_size(*content_json, message->thumbnail_size);
             message->type = MessageType::IMAGE;
@@ -3433,7 +3529,7 @@
             if(!url_json.IsString() || strncmp(url_json.GetString(), "mxc://", 6) != 0)
                 return nullptr;
 
-            message->url = homeserver + "/_matrix/media/r0/download/" + (url_json.GetString() + 6);
+            message->url = homeserver + "/_matrix/client/v1/media/download/" + (url_json.GetString() + 6) + "?access_token=" + access_token_json.GetString();
             message->thumbnail_url = message_content_extract_thumbnail_url(*content_json, homeserver);
             message_content_extract_thumbnail_size(*content_json, message->thumbnail_size);
             message->type = MessageType::VIDEO;
@@ -3444,7 +3540,7 @@
             if(!url_json.IsString() || strncmp(url_json.GetString(), "mxc://", 6) != 0)
                 return nullptr;
 
-            message->url = homeserver + "/_matrix/media/r0/download/" + (url_json.GetString() + 6);
+            message->url = homeserver + "/_matrix/client/v1/media/download/" + (url_json.GetString() + 6) + "?access_token=" + access_token_json.GetString();
             message->type = MessageType::AUDIO;
             prefix = "ðŸŽµ Play ";
         } else if(strcmp(content_type.GetString(), "m.file") == 0) {
@@ -3452,7 +3548,7 @@
             if(!url_json.IsString() || strncmp(url_json.GetString(), "mxc://", 6) != 0)
                 return nullptr;
 
-            message->url = homeserver + "/_matrix/media/r0/download/" + (url_json.GetString() + 6);
+            message->url = homeserver + "/_matrix/client/v1/media/download/" + (url_json.GetString() + 6) + "?access_token=" + access_token_json.GetString();
             message->type = MessageType::FILE;
             prefix = "ðŸ’¾ Download ";
         } else if(strcmp(content_type.GetString(), "m.emote") == 0) { // this is a /me message, TODO: show /me messages differently
